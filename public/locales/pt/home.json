{"about":"Sobre","available":"Estou disponível para posições freelance ou full-time. Entre em contato comigo e vamos conversar.","azclothes":"Eu construí este aplicativo em next.js e está hospedado na Vercel. Ele consiste em um modelo de E-Commerce funcional, mas ainda serão adicionadas algumas funcionalidades através de outro branch. Atualmente conta com autenticação de usuários fornecida em todas as páginas de inserção de dados, através do Next_auth. Foi implementado o banco de dados MongoDB para armazenamento de produtos e usuários(por enquanto o único modo de inserir dados é via seed) com auxílio do mongoose , bcrypt e axios para manipular os dados. Como método de pagamento foi implementada a API do PayPal e sua resposta influencia imediatamente no estado de pagamento do pedido. O PayPal  está em 'modo de desenvolvimento' por segurança. O React-hook-form foi utilizado para ajudar na inserção de dados. Por fim, o aplicativo conta com um layout global e responsivo.","back":"Voltar","cani":"Eu construí este aplicativo no Next JS. Inicialmente era um trabalho freelance e eu tinha que fazer um pouco rápido então usei alguns pacotes como Swiper para um carrossel bonito e limpo, EmailJs para um serviço completo de envio de e-mail. Foi utilizado Tailwind para o design responsivo.","check":"Confira alguns dos meus últimos projetos","code":"código","con":"CONECTE-SE COMIGO","contact":"CONTATO","demo":"Demonstração","email":"E-mail","freelance":"Trabalhos Freelance","frelaresume":"Resolvi trazer alguns trabalhos reais já desenvolvidos por mim, de forma ágil, utilizando pacotes npm e frameworks css. Sempre cumprindo prazos e preferencialmente focando em uma experiência mobile.","front":"Desenvolvedor Front-End","frontend":"Um Desenvolvedor Front-End","hi":"Oi, eu sou o","i_build":"O que eu construí","i_do":"O que eu faço","leg":"Vamos construir algo grande juntos","less":"Ver Menos","let_conn":"CONECTE-SE COMIGO","lets_build":"Vamos construir","message":"Mensagem","miniblog":"Eu construí este aplicativo em React JS. Consiste em um Blog de postagens públicas e usuários autenticados. Este aplicativo apresenta autenticação de usuário com Firebase, bem como o banco de dados de armazenamento em nuvem Firestore. Este aplicativo está extraindo dados das postagens individuais de cada usuário. Somente usuários autenticados podem criar suas próprias postagens com seus respectivos nomes de usuário, hashtags, título e descrição. As postagens serão extraídas do banco de dados e exibidas publicamente para aqueles que não possuem uma conta no Blog. O Painel do Usuário tem a opção de o usuário editar suas postagens, excluí-las ou visualizá-las. O hook useContext foi implementado para o filtro que permite que apenas usuários autenticados criem posts.","minindex":"Sou um desenvolvedor web front-end especializado em construir e projetar experiências digitais excepcionais. Atualmente, estou focado na construção de aplicações web front-end responsivos enquanto aprendo tecnologias back-end","more":"Detalhes","name":"Nome","netflix":"Construí este aplicativo em React JS e está hospedado na Vercel. Este aplicativo apresenta autenticação de usuário com o Firebase, bem como o banco de dados de armazenamento em nuvem Firestore. Este aplicativo está extraindo dados de filmes da IMDB API e está exibindo diferentes categorias. Possui deslizamento horizontal e uma seleção em destaque. O hook useContext também está sendo implementado para gerenciamento de estado em todo o aplicativo.","normal":"Eu não sou um desenvolvedor normal","over":"Visão geral","phone":"Telefone","project":"Projeto","projects":"projetos","reactgram":"Eu construí este aplicativo em React JS. Ele consiste em uma rede social de posts e interações entre usuários, com um backend robusto. Este aplicativo apresenta autenticação do usuário e rotas protegidas com express router, jsonwebtoken para gerar um token de usuário e middleawares como express-validator e multer utilizados para facilitar as validações do back-end bem como do upload de dados. bcrypt.js mantem as senhas protegidas atrelando um salt a elas. As interações dos usuários ocorrem por meio da publicação de fotos, likes nas fotos e comentários. Os perfis dos usuários são públicos e podem ser visualizados ao clicar no nome do usuário. Cada usuário possui sua foto de perfil, nome e bio. Cada foto possui uma imagem, titulo, likes, comentarios e autor. Esses dois modelos foram implementados com Schemas do Mongoose para armazenar suas informações unicas. Este aplicativo possui regra de negócio fechado apenas à usuários autenticados. O Dashboard do usuário tem a opção do próprio usuário editar seus posts, deletar ou visualiza-los. O Redux foi implementado para servir de provedor para as requisições HTTP nas páginas do front-end, tratando as requisições, e os estados.","resume":"Meu nome é João Marcos A. Azeredo, nasci em 1993 na cidade do Rio de Janeiro - RJ. Sempre fui muito ligado à tecnologia, afinal, nasci na década em que a população começou a ter acesso a computadores e a internet. Conheci a área de tecnologia, mais precisamente, Desenvolvimento Web, em 2014 quando iniciei minha faculdade em Análise de Sistemas. Trabalhei em outras áreas e só em 2022 voltei a trabalhar com HTML e CSS para fazer algumas pequenas edições em um site de uma pequena empresa que eu estava operando. O que eu pensei que seriam algumas pequenas edições se transformaram em amor pela programação","secret_w":"Eu construí este aplicativo em React JS. Muita lógica de programação foi usada para definir um número máximo de tentativas, letras já utilizadas e letras que foram adivinhadas a partir da palavra, a pontuação do jogo, e por fim a importação de um banco de dados de palavras em JSON. O hook useCallback foi usado para monitorar os dados do arquivo JSON e dividi-lo em dois objetos contendo uma palavra e uma categoria aleatória.","seemore":"Ver Mais","send":"Enviar Mensagem","skills":"Habilidades","subject":"Assunto","tech":"Tecnologias","together":"juntos","touch":"Entrar em contato","tstodo":"Eu construí este aplicativo em TypeScript e é uma simples lista de tarefas. Ele é baseado em uma única interface onde são atribuídos os atributos das variáveis que são consumidas via props. O Tailwind foi utilizado para estilizar o aplicativo.","who":"Quem eu sou"}